|Encoder
clk => shiftRegister8:sr.clk
clk => binCounter_6bit:bc.clk
clk => control:con.clk
sIn => shiftRegister8:sr.serialIn
sIn => BuildingBlock1:bb1.dIn[0]
nGRst => shiftRegister8:sr.nRst
nGRst => control:con.nGRst
dOut[0] <= parReg_8bit:pr8.Q[0]
dOut[1] <= parReg_8bit:pr8.Q[1]
dOut[2] <= parReg_8bit:pr8.Q[2]
dOut[3] <= parReg_8bit:pr8.Q[3]
dOut[4] <= parReg_8bit:pr8.Q[4]
dOut[5] <= parReg_8bit:pr8.Q[5]
dOut[6] <= parReg_8bit:pr8.Q[6]
dOut[7] <= parReg_8bit:pr8.Q[7]
cont[0] <= control:con.nRst
cont[1] <= control:con.nSetO
cont[2] <= control:con.clkO
statO[0] <= binCounter_6bit:bc.c[0]
statO[1] <= binCounter_6bit:bc.c[1]
statO[2] <= binCounter_6bit:bc.c[2]
statO[3] <= binCounter_6bit:bc.c[3]
statO[4] <= binCounter_6bit:bc.c[4]
statO[5] <= binCounter_6bit:bc.c[5]


|Encoder|ShiftRegister8:sr
clk => flipFlop2_1:ff0.clk
clk => flipFlop2_1:ff1.clk
clk => flipFlop2_1:ff2.clk
clk => flipFlop2_1:ff3.clk
clk => flipFlop2_1:ff4.clk
clk => flipFlop2_1:ff5.clk
clk => flipFlop2_1:ff6.clk
clk => flipFlop2_1:ff7.clk
nSet => flipFlop2_1:ff0.nSet
nSet => flipFlop2_1:ff1.nSet
nSet => flipFlop2_1:ff2.nSet
nSet => flipFlop2_1:ff3.nSet
nSet => flipFlop2_1:ff4.nSet
nSet => flipFlop2_1:ff5.nSet
nSet => flipFlop2_1:ff6.nSet
nSet => flipFlop2_1:ff7.nSet
nRst => flipFlop2_1:ff0.nRst
nRst => flipFlop2_1:ff1.nRst
nRst => flipFlop2_1:ff2.nRst
nRst => flipFlop2_1:ff3.nRst
nRst => flipFlop2_1:ff4.nRst
nRst => flipFlop2_1:ff5.nRst
nRst => flipFlop2_1:ff6.nRst
nRst => flipFlop2_1:ff7.nRst
load => flipFlop2_1:ff0.sel
load => flipFlop2_1:ff1.sel
load => flipFlop2_1:ff2.sel
load => flipFlop2_1:ff3.sel
load => flipFlop2_1:ff4.sel
load => flipFlop2_1:ff5.sel
load => flipFlop2_1:ff6.sel
load => flipFlop2_1:ff7.sel
serialIn => flipFlop2_1:ff0.A
parallelIn[0] => flipFlop2_1:ff0.B
parallelIn[1] => flipFlop2_1:ff1.B
parallelIn[2] => flipFlop2_1:ff2.B
parallelIn[3] => flipFlop2_1:ff3.B
parallelIn[4] => flipFlop2_1:ff4.B
parallelIn[5] => flipFlop2_1:ff5.B
parallelIn[6] => flipFlop2_1:ff6.B
parallelIn[7] => flipFlop2_1:ff7.B
parallelOut[0] <= flipFlop2_1:ff0.Y
parallelOut[1] <= flipFlop2_1:ff1.Y
parallelOut[2] <= flipFlop2_1:ff2.Y
parallelOut[3] <= flipFlop2_1:ff3.Y
parallelOut[4] <= flipFlop2_1:ff4.Y
parallelOut[5] <= flipFlop2_1:ff5.Y
parallelOut[6] <= flipFlop2_1:ff6.Y
parallelOut[7] <= flipFlop2_1:ff7.Y


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff0
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff0|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff0|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff0|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff0|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff1
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff1|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff1|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff1|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff1|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff2
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff2|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff2|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff2|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff2|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff3
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff3|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff3|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff3|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff3|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff4
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff4|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff4|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff4|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff4|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff5
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff5|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff5|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff5|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff5|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff6
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff6|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff6|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff6|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff6|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff7
clk => flipFlopDPET:ff.clk
sel => gateAnd2:and1.x1
sel => gateAnd2:and0.x1
nSet => flipFlopDPET:ff.nSet
nRst => flipFlopDPET:ff.nRst
A => gateAnd2:and0.x2
B => gateAnd2:and1.x2
Y <= flipFlopDPET:ff.Q


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff7|gateAnd2:and0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff7|gateAnd2:and1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff7|gateOr2:or0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|ShiftRegister8:sr|flipFlop2_1:ff7|flipFlopDPET:ff
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|BuildingBlock1:bb1
dIn[0] => gateXor2:xor4.x2
dIn[1] => gateXor2:xor3.x2
dIn[2] => gateXor2:xor2.x2
dIn[3] => dOut[3].DATAIN
dIn[4] => dOut[4].DATAIN
dIn[5] => gateXor2:xor1.x2
dIn[6] => dOut[6].DATAIN
dIn[7] => gateXor2:xor0.x2
dIn[8] => gateXor2:xor0.x1
dIn[8] => gateXor2:xor1.x1
dIn[8] => gateXor2:xor2.x1
dIn[8] => gateXor2:xor3.x1
dIn[8] => gateXor2:xor4.x1
dOut[0] <= gateXor2:xor4.y
dOut[1] <= gateXor2:xor3.y
dOut[2] <= gateXor2:xor2.y
dOut[3] <= dIn[3].DB_MAX_OUTPUT_PORT_TYPE
dOut[4] <= dIn[4].DB_MAX_OUTPUT_PORT_TYPE
dOut[5] <= gateXor2:xor1.y
dOut[6] <= dIn[6].DB_MAX_OUTPUT_PORT_TYPE
dOut[7] <= gateXor2:xor0.y


|Encoder|BuildingBlock1:bb1|gateXor2:xor0
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|BuildingBlock1:bb1|gateXor2:xor1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|BuildingBlock1:bb1|gateXor2:xor2
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|BuildingBlock1:bb1|gateXor2:xor3
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|BuildingBlock1:bb1|gateXor2:xor4
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8
nSet => flipFlopDPET:ff0.nSet
nSet => flipFlopDPET:ff1.nSet
nSet => flipFlopDPET:ff2.nSet
nSet => flipFlopDPET:ff3.nSet
nSet => flipFlopDPET:ff4.nSet
nSet => flipFlopDPET:ff5.nSet
nSet => flipFlopDPET:ff6.nSet
nSet => flipFlopDPET:ff7.nSet
clk => flipFlopDPET:ff0.clk
clk => flipFlopDPET:ff1.clk
clk => flipFlopDPET:ff2.clk
clk => flipFlopDPET:ff3.clk
clk => flipFlopDPET:ff4.clk
clk => flipFlopDPET:ff5.clk
clk => flipFlopDPET:ff6.clk
clk => flipFlopDPET:ff7.clk
D[0] => flipFlopDPET:ff0.D
D[1] => flipFlopDPET:ff1.D
D[2] => flipFlopDPET:ff2.D
D[3] => flipFlopDPET:ff3.D
D[4] => flipFlopDPET:ff4.D
D[5] => flipFlopDPET:ff5.D
D[6] => flipFlopDPET:ff6.D
D[7] => flipFlopDPET:ff7.D
Q[0] <= flipFlopDPET:ff0.Q
Q[1] <= flipFlopDPET:ff1.Q
Q[2] <= flipFlopDPET:ff2.Q
Q[3] <= flipFlopDPET:ff3.Q
Q[4] <= flipFlopDPET:ff4.Q
Q[5] <= flipFlopDPET:ff5.Q
Q[6] <= flipFlopDPET:ff6.Q
Q[7] <= flipFlopDPET:ff7.Q


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff0
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff1
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff2
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff3
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff4
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff5
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff6
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|parReg_8bit:pr8|flipFlopDPET:ff7
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc
nRst => flipFlopDPET:ff0.nRst
nRst => flipFlopDPET:ff1.nRst
nRst => flipFlopDPET:ff2.nRst
nRst => flipFlopDPET:ff3.nRst
nRst => flipFlopDPET:ff4.nRst
nRst => flipFlopDPET:ff5.nRst
clk => flipFlopDPET:ff0.clk
clk => flipFlopDPET:ff1.clk
clk => flipFlopDPET:ff2.clk
clk => flipFlopDPET:ff3.clk
clk => flipFlopDPET:ff4.clk
clk => flipFlopDPET:ff5.clk
c[0] <= flipFlopDPET:ff0.Q
c[1] <= flipFlopDPET:ff1.Q
c[2] <= flipFlopDPET:ff2.Q
c[3] <= flipFlopDPET:ff3.Q
c[4] <= flipFlopDPET:ff4.Q
c[5] <= flipFlopDPET:ff5.Q


|Encoder|binCounter_6bit:bc|gateAnd2:ad1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateAnd2:ad2
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateAnd2:ad3
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateAnd2:ad4
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateXor2:xr1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateXor2:xr2
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateXor2:xr3
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateXor2:xr4
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|gateXor2:xr5
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff0
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff1
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff2
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff3
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff4
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|binCounter_6bit:bc|flipFlopDPET:ff5
clk => nQ~reg0.CLK
clk => Q~reg0.CLK
D => Q~reg0.DATAIN
D => nQ~reg0.DATAIN
nSet => Q.IN0
nRst => Q.IN1
nRst => nQ~reg0.PRESET
nRst => Q~reg0.ACLR
Q <= Q~reg0.DB_MAX_OUTPUT_PORT_TYPE
nQ <= nQ~reg0.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|control:con
nGRst => gateNand2:nad1.x1
nGRst => gateNand2:nad3.x1
clk => gateNand2:nad2.x1
clk => gateNand2:nad4.x1
clk => gateNor2:nord.x1
add[0] => contMem:cMem.add[0]
add[1] => contMem:cMem.add[1]
add[2] => contMem:cMem.add[2]
add[3] => contMem:cMem.add[3]
add[4] => contMem:cMem.add[4]
add[5] => contMem:cMem.add[5]
nRst <= gateNand2:nad2.y
nSetO <= gateNand2:nad4.y
clkO <= gateNor2:nord.y


|Encoder|control:con|contMem:cMem
add[0] => prog.RADDR
add[1] => prog.RADDR1
add[2] => prog.RADDR2
add[3] => prog.RADDR3
add[4] => prog.RADDR4
add[5] => prog.RADDR5
dOut[0] <= prog.DATAOUT
dOut[1] <= prog.DATAOUT1
dOut[2] <= prog.DATAOUT2


|Encoder|control:con|gateNand2:nad1
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|control:con|gateNand2:nad2
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|control:con|gateNand2:nad3
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|control:con|gateNand2:nad4
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


|Encoder|control:con|gateNor2:nord
x1 => y.IN0
x2 => y.IN1
y <= y.DB_MAX_OUTPUT_PORT_TYPE


